{
    "faqs": {
        "patch": "The Cultris II patch made by Def, significantly improves the game's performance.\n[You can download it here](https://github.com/zDEFz/c2-patch). There's a video in the description with indications in how to install the patch (it's easy!). This patch also allows disabling some ingame sounds, for additional performance gain.",
        "webmaster": "Simon, Cultris II developer, has stated he will update the game only after the game has a webmaster. Anyone can apply to be one, although this would be a long term job with no pay. Contact Simon via email: `de@iru.ch`",
        "simon": "Cultris II only developer is Simon Felix. The only way to get in touch with Simon is via email: `de@iru.ch`",
        "mac": "There's no official support for macOS.\nHowever, some users have reported they were able to play using external software, check:\nhttps://discord.com/channels/202843125633384448/516686648201707548/1182624707716055040\nhttps://discord.com/channels/202843125633384448/516689168223567872/1042891393019953172",
        "c1soundtrack": "[Here's a list of the songs in Cultris I](https://docs.google.com/spreadsheets/d/1MPaLgEnlx9bNBmmwzxY0UeiotZ7LZ8VXz64qYdMU24I).",
        "combotimer": "Here's a table of how much time you gain (or lose) from each combo! On the X axis: how many lines you clear with a piece. On the Y axis: the combo you had before sending the piece.\nhttps://media.discordapp.net/attachments/516689168223567872/1226168961452740659/image.png?ex=662d0455&is=661a8f55&hm=baae8262fa28dde1e10aa4129715706b4f5190abee6d104a72aba2e2fe702dec&=&format=webp&quality=lossless\nHere's the formula, written in Python:\n```py\ndef timeToAddToCombo(currentCombo, clearedLines):\n    if not clearedLines:\n        return -0.39\n    \n    return 1.95 * ((clearedLines + 2) / 1.6 / (currentCombo**1.6 + 1)) - currentCombo * 0.1\n```",
        "combolines": "Here's the formula written in Python on how many lines you send with each combo:\n```py\ndef clamp(value):\n    if value < 0:\n        return 0\n    if value > 1:\n        return 1\n    return value\n\ncomboTable = [0, 0, 1, 1, 1, 2, 2, 3, 5, 7, 9, 11]\ndef early_game_factor(numberOfLinesCleared, currentActiveCombo):\n    if numberOfLinesCleared == 0:\n        return 0\n\n    return (\n            numberOfLinesCleared - 1\n          + comboTable[min(currentActiveCombo, len(comboTable) - 1)]\n    )\n\n\ndef late_game_factor(numberOfLinesCleared, currentActiveCombo):\n    if numberOfLinesCleared == 0:\n        return 0\n\n    return numberOfLinesCleared * 1.2 + currentActiveCombo\n\n\ndef sent_lines(\n    numberOfLinesCleared,\n    currentActiveCombo,\n    elapsedTime,\n    sentLines,\n    numberOfAliveOpponents,\n):\n    if numberOfLinesCleared == 0:\n        return 0\n\n    multiplier = clamp(\n        clamp((elapsedTime - 60) / (300 - 60))\n        + clamp((sentLines - 50) / (500 - 50)),\n    )\n\n    sent = (\n        early_game_factor(numberOfLinesCleared, currentActiveCombo) * (1 - multiplier)\n        + late_game_factor(numberOfLinesCleared, currentActiveCombo) * multiplier\n    )\n    if numberOfAliveOpponents > 0:\n        sent *= min(0.92 + numberOfAliveOpponents * 0.08, 2)\n\n    return round(sent)\n```\n\nSome rough conclusions that can be made from this are:\n- You send more lines in bigger rooms: twice as much  in rooms of 14+ opponents compared to 1v1s!\n- Reaching combo 11 sends 11 lines, and after that, each consecutive combo sends an additional 11 lines.\n- After sending 153 lines, you send 1 extra line per line you clear.\n- Every player would send the same amount of lines with the same combo: after 5 minutes, or after every player has sent 500 lines.",
        "randomizer": "Cultris II does not use the classic bag randomizer that is used in Guideline.\nIn Cultris II, you will never start a match with an S or Z piece. After that, it's random but in a way that getting the same piece in a row is rare, but all pieces appear about the same amount of times.\n\nHere's Python code describing how the randomizer works:\n```py\nindexToPiece = {0: \"I\", 1: \"J\", 2: \"L\", 3: \"O\", 4: \"S\", 5: \"T\", 6: \"Z\"}\nrandom_array = [0, 0, 0, 0, 0, 0, 0]\n\ndef next_piece(random_array, is_first_piece):\n    \"\"\"\n    Step 1: Create a zero vector of length 0. Assign a piece to each index (for example: first element corresponds to I, second element to J, etc.)\n\n    Step 2: Divide each element of the array in half.\n    Step 3: Add a random number between 0 and 1 to each element of the array.\n    Step 4: Let n be the index of the maximum value of the array.\n    Step 5: Divide the element of the array in the nth position by 3.5.\n    Step 6: If it's the first piece and the nth element of the array corresponds to S or Z, go to Step 2.\n    Step 7: Next piece is the nth piece. Go to Step 2 for next piece.\n    \"\"\"\n    while True:\n\n        # Step 2/3\n        for i in range(7):\n            random_array[i] = random_array[i] / 2.0 + random.random()\n\n        # Step 4\n        index_of_max = max(range(7), key=lambda x: random_array[x])\n\n        # Step 5\n        random_array[index_of_max] /= 3.5\n\n        # Step 6\n        piece = indexToPiece[index_of_max]\n        if not (is_first_piece and (piece == \"S\" or piece == \"Z\")):\n            break\n\n    return piece\n```"
    },
    "aliases": {
        "patch": [
            "patches",
            "mod"
        ],
        "webmaster": [
            "web",
            "website",
            "update",
            "updates"
        ],
        "simon": [
            "c2developer",
            "c2dev",
            "c2devs",
            "dev",
            "devs",
            "developer",
            "developers",
            "c2developers"
        ],
        "mac": [
            "macos"
        ],
        "c1soundtrack": [
            "c1ost",
            "c1music",
            "c1songs"
        ],
        "combotimer": [
            "combotime",
            "timer"
        ],
        "combolines": [
            "lines"
        ],
        "randomizer": [
            "bag"
        ]
    }
}